#this simple template creates an ec2 instance and installs the mongodb engine inside the instance
# next Steps: add instance numbers ad enable the cluster sharded replication
---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  clientIp:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  imageId:
    Description: WebServer EC2 instance type
    Type: String
    Default: ami-0fe0b2cf0e1f25c8a
  vpcId:
    Description: the vpc of the instances
    Type: String
    Default: vpc-0770121285d2088c8
  subnetId:
    Description: subnet where the ec2 will exist
    Type: String
    Default: subnet-08a8356eb822de6ad
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  MyInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
    - t1.micro
    - t3.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref vpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: clientIp
      - IpProtocol: tcp
        FromPort: '27017'
        ToPort: '27017'
        CidrIp:
          Ref: clientIp

  RecursiveRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      Description: Permit to each instance to communicate
      FromPort: 27017
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      ToPort: 27017

  MongoDbTestEasyMarketMasterReplica:
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces: 
      - AssociatePublicIpAddress: true
        DeviceIndex: "0"
        GroupSet: 
          - Ref: InstanceSecurityGroup
        SubnetId: 
          Ref: subnetId
      InstanceType:
        Ref: MyInstanceType
      #SecurityGroupIds:
      #- !GetAtt InstanceSecurityGroup.GroupId
      KeyName:
        Ref: KeyName
      ImageId: !Ref imageId
      #SubnetId: !Ref subnetId
      Tags: 
        - Key: Name
          Value: MongoDbTestEasyMarketReplicaMaster
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #initialize
            yum update -y
            yum install docker -y
            systemctl enable docker.service
            systemctl start docker.service
            groupadd docker
            usermod -aG docker $USER
            newgrp docker
            curl -L "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)"  -o /usr/local/bin/docker-compose
            mv /usr/local/bin/docker-compose /usr/bin/docker-compose
            chmod +x /usr/bin/docker-compose
            yum install git -y
            git clone https://github.com/nicofr9/MongoDBShardedCluster.git
            cd MongoDBShardedCluster/
            docker-compose up -d 
            sleep 60
            #configuration
            docker exec mongo-config-01 sh -c "mongo < /scripts/init-configserver.js"
            docker exec shard-01-node-a sh -c "mongo < /scripts/init-shard01.js"
            docker exec shard-02-node-a sh -c "mongo < /scripts/init-shard02.js"
            docker exec -it shard-01-node-a bash -c "echo 'rs.addArb(\""shard01-x:27017\"")' | mongo --port 27017"
            docker exec -it shard-02-node-a bash -c "echo 'rs.addArb(\""shard02-x:27017\"")' | mongo --port 27017"
            docker exec router-01 sh -c "mongo < /scripts/setDefaultRW.js"
            docker exec router-01 sh -c "mongo < /scripts/init-router.js"
            docker exec shard-01-node-a sh -c "mongo < /scripts/setFeatureCompatibilityVersion.js"
            docker exec shard-02-node-a sh -c "mongo < /scripts/setFeatureCompatibilityVersion.js"
            docker exec router-01 sh -c "mongo </scripts/setFeatureCompatibilityVersion.js"
            docker exec router-02 sh -c "mongo </scripts/setFeatureCompatibilityVersion.js"





  MongoDbTestEasyMarketReplica1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: MyInstanceType
      NetworkInterfaces: 
      - AssociatePublicIpAddress: true
        DeviceIndex: "0"
        GroupSet: 
          - Ref: InstanceSecurityGroup
        SubnetId: 
          Ref: subnetId
      #SecurityGroupIds:
      #- !GetAtt InstanceSecurityGroup.GroupId
      KeyName:
        Ref: KeyName
      ImageId: !Ref imageId
      #SubnetId: !Ref subnetId
      Tags: 
        - Key: Name
          Value: MongoDbTestEasyMarketReplica1
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #initialize
            yum update -y
            yum install docker -y
            systemctl enable docker.service
            systemctl start docker.service
            groupadd docker
            usermod -aG docker $USER
            newgrp docker
            curl -L "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)"  -o /usr/local/bin/docker-compose
            mv /usr/local/bin/docker-compose /usr/bin/docker-compose
            chmod +x /usr/bin/docker-compose
            yum install git -y
            git clone https://github.com/nicofr9/MongoDBShardedCluster.git
            cd MongoDBShardedCluster/
            docker-compose up -d 
            sleep 60
            #configuration
            docker exec mongo-config-01 sh -c "mongo < /scripts/init-configserver.js"
            docker exec shard-01-node-a sh -c "mongo < /scripts/init-shard01.js"
            docker exec shard-02-node-a sh -c "mongo < /scripts/init-shard02.js"
            docker exec -it shard-01-node-a bash -c "echo 'rs.addArb(\""shard01-x:27017\"")' | mongo --port 27017"
            docker exec -it shard-02-node-a bash -c "echo 'rs.addArb(\""shard02-x:27017\"")' | mongo --port 27017"
            docker exec router-01 sh -c "mongo < /scripts/setDefaultRW.js"
            docker exec router-01 sh -c "mongo < /scripts/init-router.js"
            docker exec shard-01-node-a sh -c "mongo < /scripts/setFeatureCompatibilityVersion.js"
            docker exec shard-02-node-a sh -c "mongo < /scripts/setFeatureCompatibilityVersion.js"
            docker exec router-01 sh -c "mongo </scripts/setFeatureCompatibilityVersion.js"
            docker exec router-02 sh -c "mongo </scripts/setFeatureCompatibilityVersion.js"


  MongoDbTestEasyMarketReplica2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: MyInstanceType
      NetworkInterfaces: 
      - AssociatePublicIpAddress: true
        DeviceIndex: "0"
        GroupSet: 
          - Ref: InstanceSecurityGroup
        SubnetId: 
          Ref: subnetId
      #SecurityGroupIds:
      #- !GetAtt InstanceSecurityGroup.GroupId
      KeyName:
        Ref: KeyName
      ImageId: !Ref imageId
      #SubnetId: !Ref subnetId
      Tags: 
        - Key: Name
          Value: MongoDbTestEasyMarketReplica2
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #initialize
            yum update -y
            yum install docker -y
            systemctl enable docker.service
            systemctl start docker.service
            groupadd docker
            usermod -aG docker $USER
            newgrp docker
            curl -L "https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)"  -o /usr/local/bin/docker-compose
            mv /usr/local/bin/docker-compose /usr/bin/docker-compose
            chmod +x /usr/bin/docker-compose
            yum install git -y
            git clone https://github.com/nicofr9/MongoDBShardedCluster.git
            cd MongoDBShardedCluster/
            docker-compose up -d 
            sleep 60
            #configuration
            docker exec mongo-config-01 sh -c "mongo < /scripts/init-configserver.js"
            docker exec shard-01-node-a sh -c "mongo < /scripts/init-shard01.js"
            docker exec shard-02-node-a sh -c "mongo < /scripts/init-shard02.js"
            docker exec -it shard-01-node-a bash -c "echo 'rs.addArb(\""shard01-x:27017\"")' | mongo --port 27017"
            docker exec -it shard-02-node-a bash -c "echo 'rs.addArb(\""shard02-x:27017\"")' | mongo --port 27017"
            docker exec router-01 sh -c "mongo < /scripts/setDefaultRW.js"
            docker exec router-01 sh -c "mongo < /scripts/init-router.js"
            docker exec shard-01-node-a sh -c "mongo < /scripts/setFeatureCompatibilityVersion.js"
            docker exec shard-02-node-a sh -c "mongo < /scripts/setFeatureCompatibilityVersion.js"
            docker exec router-01 sh -c "mongo </scripts/setFeatureCompatibilityVersion.js"
            docker exec router-02 sh -c "mongo </scripts/setFeatureCompatibilityVersion.js"


  

Outputs:
  InstanceIdMaster:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: MongoDbTestEasyMarketMasterReplica
  InstanceIdReplica1:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: MongoDbTestEasyMarketReplica1
  InstanceIdReplica2:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: MongoDbTestEasyMarketReplica2

  PublicIPMasterReplica:
    Description: Public IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - MongoDbTestEasyMarketMasterReplica
      - PublicIp

  PublicIPReplica1:
    Description: Public IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - MongoDbTestEasyMarketReplica1
      - PublicIp

  PublicIPReplica2:
    Description: Public IP address of the newly created EC2 instance
    Value:
      Fn::GetAtt:
      - MongoDbTestEasyMarketReplica2
      - PublicIp